diff --git a/index.js b/index.js
index 5ae40cde5998f371490816ea1fa0b26df8ab6c5c..74eaa3c8cc207d0652c24f2eda6171ab4ecaf12f 100644
--- a/index.js
+++ b/index.js
@@ -10,7 +10,8 @@ const defaultCache = require('./cache')
 const buildCustomWorker = require('./build-custom-worker')
 const buildFallbackWorker = require('./build-fallback-worker')
 
-const getRevision = file => crypto.createHash('md5').update(fs.readFileSync(file)).digest('hex')
+const getRevision = file =>
+  crypto.createHash('md5').update(fs.readFileSync(file)).digest('hex')
 
 module.exports = (nextConfig = {}) => {
   const pwaNextConfig = {
@@ -20,7 +21,12 @@ module.exports = (nextConfig = {}) => {
         webpack,
         buildId,
         dev,
-        config: { distDir = '.next', pwa = {}, pageExtensions = ['tsx', 'ts', 'jsx', 'js', 'mdx'], experimental = {} }
+        config: {
+          distDir = '.next',
+          pwa = {},
+          pageExtensions = ['tsx', 'ts', 'jsx', 'js', 'mdx'],
+          experimental = {}
+        }
       } = options
 
       let basePath = options.config.basePath
@@ -53,7 +59,7 @@ module.exports = (nextConfig = {}) => {
         customWorkerDir = 'worker',
         subdomainPrefix, // deprecated, use basePath in next.config.js instead
         ...workbox
-      } = pwa
+      } = nextConfig.pwa
 
       if (typeof nextConfig.webpack === 'function') {
         config = nextConfig.webpack(config, options)
@@ -70,7 +76,9 @@ module.exports = (nextConfig = {}) => {
         )
       }
 
-      console.log(`> [PWA] Compile ${options.isServer ? 'server' : 'client (static)'}`)
+      console.log(
+        `> [PWA] Compile ${options.isServer ? 'server' : 'client (static)'}`
+      )
 
       let { runtimeCaching = defaultCache } = pwa
       const _scope = path.posix.join(scope, '/')
@@ -105,7 +113,9 @@ module.exports = (nextConfig = {}) => {
           basedir: options.dir,
           customWorkerDir,
           destdir: _dest,
-          plugins: config.plugins.filter(plugin => plugin instanceof webpack.DefinePlugin),
+          plugins: config.plugins.filter(
+            plugin => plugin instanceof webpack.DefinePlugin
+          ),
           minify: !dev
         })
 
@@ -114,7 +124,11 @@ module.exports = (nextConfig = {}) => {
         }
 
         if (register) {
-          console.log(`> [PWA] Auto register service worker with: ${path.resolve(registerJs)}`)
+          console.log(
+            `> [PWA] Auto register service worker with: ${path.resolve(
+              registerJs
+            )}`
+          )
         } else {
           console.log(
             `> [PWA] Auto register service worker is disabled, please call following code in componentDidMount callback or useEffect hook`
@@ -170,7 +184,10 @@ module.exports = (nextConfig = {}) => {
               url: basePath,
               revision: buildId
             })
-          } else if (typeof dynamicStartUrlRedirect === 'string' && dynamicStartUrlRedirect.length > 0) {
+          } else if (
+            typeof dynamicStartUrlRedirect === 'string' &&
+            dynamicStartUrlRedirect.length > 0
+          ) {
             manifestEntries.push({
               url: dynamicStartUrlRedirect,
               revision: buildId
@@ -213,7 +230,9 @@ module.exports = (nextConfig = {}) => {
             ({ asset, compilation }) => {
               if (
                 asset.name.startsWith('server/') ||
-                asset.name.match(/^(build-manifest\.json|react-loadable-manifest\.json)$/)
+                asset.name.match(
+                  /^(build-manifest\.json|react-loadable-manifest\.json)$/
+                )
               ) {
                 return true
               }
@@ -239,8 +258,14 @@ module.exports = (nextConfig = {}) => {
             ...manifestTransforms,
             async (manifestEntries, compilation) => {
               const manifest = manifestEntries.map(m => {
-                m.url = m.url.replace('/_next//static/image', '/_next/static/image')
-                m.url = m.url.replace('/_next//static/media', '/_next/static/media')
+                m.url = m.url.replace(
+                  '/_next//static/image',
+                  '/_next/static/image'
+                )
+                m.url = m.url.replace(
+                  '/_next//static/media',
+                  '/_next/static/media'
+                )
                 if (m.revision === null) {
                   let key = m.url
                   if (key.startsWith(config.output.publicPath)) {
@@ -293,9 +318,18 @@ module.exports = (nextConfig = {}) => {
                 cacheName: 'start-url',
                 plugins: [
                   {
-                    cacheWillUpdate: async ({ request, response, event, state }) => {
+                    cacheWillUpdate: async ({
+                      request,
+                      response,
+                      event,
+                      state
+                    }) => {
                       if (response && response.type === 'opaqueredirect') {
-                        return new Response(response.body, { status: 200, statusText: 'OK', headers: response.headers })
+                        return new Response(response.body, {
+                          status: 200,
+                          statusText: 'OK',
+                          headers: response.headers
+                        })
                       }
                       return response
                     }
@@ -308,7 +342,11 @@ module.exports = (nextConfig = {}) => {
           if (_fallbacks) {
             runtimeCaching.forEach(c => {
               if (c.options.precacheFallback) return
-              if (Array.isArray(c.options.plugins) && c.options.plugins.find(p => 'handlerDidError' in p)) return
+              if (
+                Array.isArray(c.options.plugins) &&
+                c.options.plugins.find(p => 'handlerDidError' in p)
+              )
+                return
               if (!c.options.plugins) c.options.plugins = []
               c.options.plugins.push({
                 handlerDidError: async ({ request }) => self.fallback(request)